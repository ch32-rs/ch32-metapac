use crate::metadata::ir::*;
pub(crate) static REGISTERS: IR = IR {
    blocks: &[Block {
        name: "Afio",
        extends: None,
        description: Some("Alternate function I/O."),
        items: &[
            BlockItem {
                name: "pcfr1",
                description: Some("AF remap and debug I/O configuration register (AFIO_PCFR1)."),
                array: None,
                byte_offset: 0x4,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Pcfr1"),
                }),
            },
            BlockItem {
                name: "exticr",
                description: Some("External interrupt configuration register (AFIO_EXTICR)."),
                array: None,
                byte_offset: 0x8,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Exticr"),
                }),
            },
        ],
    }],
    fieldsets: &[
        FieldSet {
            name: "Exticr",
            extends: None,
            description: Some("External interrupt configuration register (AFIO_EXTICR)."),
            bit_size: 32,
            fields: &[Field {
                name: "exti",
                description: Some("EXTI0 configuration."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 1,
                array: Some(Array::Regular(RegularArray { len: 16, stride: 1 })),
                enumm: None,
            }],
        },
        FieldSet {
            name: "Pcfr1",
            extends: None,
            description: Some("AF remap and debug I/O configuration register (AFIO_PCFR1)."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "i2c1_rm",
                    description: Some("I2C1 remapping."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 2,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "usart1_rm",
                    description: Some("USART1 remapping."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 3,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "tim1_rm",
                    description: Some("TIM1 remapping."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 6 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "tim2_rm",
                    description: Some("TIM2 remapping."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 2,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "adc_etrgreg_rm",
                    description: Some("ADC External trigger injected conversion remapping."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 18 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "swcfg",
                    description: Some("Serial wire JTAG configuration."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 24 }),
                    bit_size: 3,
                    array: None,
                    enumm: None,
                },
            ],
        },
    ],
    enums: &[],
};
