use crate::metadata::ir::*;
pub(crate) static REGISTERS: IR = IR {
    blocks: &[Block {
        name: "Eth",
        extends: None,
        description: Some("Ethernet MAC-10M+PHY"),
        items: &[
            BlockItem {
                name: "eie",
                description: Some("Interrupt enable register"),
                array: None,
                byte_offset: 0x3,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Eie"),
                }),
            },
            BlockItem {
                name: "eir",
                description: Some("Interrupt flag register"),
                array: None,
                byte_offset: 0x4,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Eir"),
                }),
            },
            BlockItem {
                name: "estat",
                description: Some("Status register"),
                array: None,
                byte_offset: 0x5,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Estat"),
                }),
            },
            BlockItem {
                name: "econ2",
                description: Some("PHY analog parameter setting register"),
                array: None,
                byte_offset: 0x6,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Econ2"),
                }),
            },
            BlockItem {
                name: "econ1",
                description: Some("Receive/transmit control register"),
                array: None,
                byte_offset: 0x7,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Econ1"),
                }),
            },
            BlockItem {
                name: "etxst",
                description: Some("Transmit DMA buffer start address register"),
                array: None,
                byte_offset: 0x8,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Etxst"),
                }),
            },
            BlockItem {
                name: "etxln",
                description: Some("Transmission length register"),
                array: None,
                byte_offset: 0xa,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Etxln"),
                }),
            },
            BlockItem {
                name: "erxst",
                description: Some("Receive DMA buffer start address register"),
                array: None,
                byte_offset: 0xc,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Erxst"),
                }),
            },
            BlockItem {
                name: "erxln",
                description: Some("Reception length register"),
                array: None,
                byte_offset: 0xe,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Erxln"),
                }),
            },
            BlockItem {
                name: "htl",
                description: Some("Hash table low register"),
                array: None,
                byte_offset: 0x10,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Htl"),
                }),
            },
            BlockItem {
                name: "hth",
                description: Some("Hash table high register"),
                array: None,
                byte_offset: 0x14,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Hth"),
                }),
            },
            BlockItem {
                name: "erxfcon",
                description: Some("Receive packet filter control register"),
                array: None,
                byte_offset: 0x18,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Erxfcon"),
                }),
            },
            BlockItem {
                name: "macon1",
                description: Some("Mac layer flow control register"),
                array: None,
                byte_offset: 0x19,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Macon1"),
                }),
            },
            BlockItem {
                name: "macon2",
                description: Some("Mac layer packet control register"),
                array: None,
                byte_offset: 0x1a,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Macon2"),
                }),
            },
            BlockItem {
                name: "mabbipg",
                description: Some("Minimum packet interval register"),
                array: None,
                byte_offset: 0x1b,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Mabbipg"),
                }),
            },
            BlockItem {
                name: "epaus",
                description: Some("Flow control pause frame time register"),
                array: None,
                byte_offset: 0x1c,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Epaus"),
                }),
            },
            BlockItem {
                name: "mamxfl",
                description: Some("Maximum receive packet length register"),
                array: None,
                byte_offset: 0x1e,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Mamxfl"),
                }),
            },
            BlockItem {
                name: "mird",
                description: Some("MII read register"),
                array: None,
                byte_offset: 0x20,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Mird"),
                }),
            },
            BlockItem {
                name: "miregadr",
                description: Some("MII read register address"),
                array: None,
                byte_offset: 0x24,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Miregadr"),
                }),
            },
            BlockItem {
                name: "miwr",
                description: Some("MII write register"),
                array: None,
                byte_offset: 0x24,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Miwr"),
                }),
            },
            BlockItem {
                name: "maadr0",
                description: Some("MAC address low register"),
                array: None,
                byte_offset: 0x28,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Maadr0"),
                }),
            },
            BlockItem {
                name: "maadr1",
                description: Some("MAC address byte 1"),
                array: None,
                byte_offset: 0x29,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Maadr1"),
                }),
            },
            BlockItem {
                name: "maadr2",
                description: Some("MAC address byte 2"),
                array: None,
                byte_offset: 0x2a,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Maadr2"),
                }),
            },
            BlockItem {
                name: "maadr3",
                description: Some("MAC address byte 3"),
                array: None,
                byte_offset: 0x2b,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Maadr3"),
                }),
            },
            BlockItem {
                name: "maadr4",
                description: Some("MAC address byte 4"),
                array: None,
                byte_offset: 0x2c,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Maadr4"),
                }),
            },
            BlockItem {
                name: "maadr5",
                description: Some("MAC address high register"),
                array: None,
                byte_offset: 0x2d,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Maadr5"),
                }),
            },
        ],
    }],
    fieldsets: &[
        FieldSet {
            name: "Econ1",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[
                Field {
                    name: "rx_en",
                    description: Some("Receive enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "tx_rts",
                    description: Some(
                        "Transmit start. Cleared automatically after the transmission is completed",
                    ),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 3 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rx_rst",
                    description: Some("Receive module reset"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 6 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "tx_rst",
                    description: Some("Transmit module reset"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 7 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Econ2",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[
                Field {
                    name: "tx",
                    description: Some("Transmitter energy-saving driver control"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rx_must",
                    description: Some("Reserved. Must write 110b."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 3,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Eie",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[
                Field {
                    name: "rxerie",
                    description: Some("Receive error interrupt enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "txerie",
                    description: Some("Transmit error interrupt enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "r_en50",
                    description: Some("Built-in 50ohm impedance matching resistor enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "txie",
                    description: Some("Transmit completed interrupt enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 3 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "linkie",
                    description: Some("Link change interrupt enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rxie",
                    description: Some("Receive completed interrupt enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 6 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "intie",
                    description: Some("Ethernet interrupt enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 7 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Eir",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[
                Field {
                    name: "rxerif",
                    description: Some("Receive error flag"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "txerif",
                    description: Some("Transmit error flag"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "txif",
                    description: Some("Transmit completed flag"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 3 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "linkif",
                    description: Some("Link change flag"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rxif",
                    description: Some("Receive completed flag"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 6 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Epaus",
            extends: None,
            description: None,
            bit_size: 16,
            fields: &[Field {
                name: "epaus",
                description: Some("Flow control pause frame time"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 16,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Erxfcon",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[
                Field {
                    name: "bcen",
                    description: Some("Broadcast packet matching filter settings"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "mcen",
                    description: Some("Multicast packet matching filter settings"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "hten",
                    description: Some("Hash table matching filter settings"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "mpen",
                    description: Some("Magic packet filter settings"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 3 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "en",
                    description: Some("Receive filtering enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "crcen",
                    description: Some("CRC checksum filter settings"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 5 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "ucen",
                    description: Some("Unicast match filter settings"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 7 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Erxln",
            extends: None,
            description: None,
            bit_size: 16,
            fields: &[Field {
                name: "erxln",
                description: Some("Reception length"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 16,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Erxst",
            extends: None,
            description: None,
            bit_size: 16,
            fields: &[Field {
                name: "erxst",
                description: Some("Receive DMA buffer start address"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 16,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Estat",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[
                Field {
                    name: "txabrt",
                    description: Some("Transmission interrupted by MCU"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rxbusy",
                    description: Some("Packets receive in progress"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rxmore",
                    description: Some("Receive more than the set maximum packets"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 3 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rxnibble",
                    description: Some("Receive nibble error / Receive more than the set maximum"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rxcrcer",
                    description: Some("Receive CRC error"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 5 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "bufer",
                    description: Some("Buffer error"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 6 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "int",
                    description: Some("Interrupt"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 7 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Etxln",
            extends: None,
            description: None,
            bit_size: 16,
            fields: &[Field {
                name: "etxln",
                description: Some("Transmission length"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 16,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Etxst",
            extends: None,
            description: None,
            bit_size: 16,
            fields: &[Field {
                name: "etxst",
                description: Some("Transmit DMA buffer start address"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 16,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Hth",
            extends: None,
            description: None,
            bit_size: 32,
            fields: &[
                Field {
                    name: "b4",
                    description: Some("Hash Table byte 4"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "b5",
                    description: Some("Hash Table byte 5"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "b6",
                    description: Some("Hash Table byte 6"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 16 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "b7",
                    description: Some("Hash Table byte 7"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 24 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Htl",
            extends: None,
            description: None,
            bit_size: 32,
            fields: &[
                Field {
                    name: "b0",
                    description: Some("Hash Table byte 0"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "b1",
                    description: Some("Hash Table byte 1"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "b2",
                    description: Some("Hash Table byte 2"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 16 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "b3",
                    description: Some("Hash Table byte 3"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 24 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Maadr0",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[Field {
                name: "maadr",
                description: Some("MAC Address byte 0"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 8,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Maadr1",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[Field {
                name: "maadr",
                description: Some("MAC Address byte 1"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 8,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Maadr2",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[Field {
                name: "maadr",
                description: Some("MAC Address byte 2"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 8,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Maadr3",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[Field {
                name: "maadr",
                description: Some("MAC Address byte 3"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 8,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Maadr4",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[Field {
                name: "maadr",
                description: Some("MAC Address byte 4"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 8,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Maadr5",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[Field {
                name: "maadr",
                description: Some("MAC Address byte 5"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 8,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Mabbipg",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[Field {
                name: "mabbipg",
                description: Some("Minimum number of packet interval bytes"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 7,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Macon1",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[
                Field {
                    name: "marxen",
                    description: Some("MAC layer receive enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "passall",
                    description: Some("Control frame setting"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rxpaus",
                    description: Some("Receive pause frame enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "txpaus",
                    description: Some("Transmit pause frame enable control"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 3 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "fcen",
                    description: Some("Pause frame setting. Active at full-duplex"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 2,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Macon2",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[
                Field {
                    name: "fuldpx",
                    description: Some("Ethernet communication mode"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "hfrmen",
                    description: Some("Jumbo frame received enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "phdren",
                    description: Some("Special 4 bytes are not involved in CRC."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 3 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "txcrcen",
                    description: Some("Transmit add CRC control"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "padcfg",
                    description: Some("Short packet fill setting"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 5 }),
                    bit_size: 3,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Mamxfl",
            extends: None,
            description: None,
            bit_size: 16,
            fields: &[Field {
                name: "mamxfl",
                description: Some("Maximum receive packet length"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 16,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Mird",
            extends: None,
            description: None,
            bit_size: 16,
            fields: &[Field {
                name: "rd",
                description: Some("MII Read register"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 16,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Miregadr",
            extends: None,
            description: None,
            bit_size: 8,
            fields: &[Field {
                name: "miregadr",
                description: Some("MII Read register address"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 8,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Miwr",
            extends: None,
            description: None,
            bit_size: 32,
            fields: &[
                Field {
                    name: "mirdl",
                    description: Some("PHY register address"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 5,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "write",
                    description: Some("Write to MII register"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "wr",
                    description: Some("MII write register"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 16 }),
                    bit_size: 16,
                    array: None,
                    enumm: None,
                },
            ],
        },
    ],
    enums: &[],
};
