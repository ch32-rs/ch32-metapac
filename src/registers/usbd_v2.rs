use crate::metadata::ir::*;
pub(crate) static REGISTERS: IR = IR {
    blocks: &[Block {
        name: "Usb",
        extends: None,
        description: Some("Universal serial bus full-speed device interface."),
        items: &[
            BlockItem {
                name: "epr",
                description: Some("endpoint register. 0 to 7."),
                array: Some(Array::Regular(RegularArray { len: 8, stride: 4 })),
                byte_offset: 0x0,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 16,
                    fieldset: Some("Epr"),
                }),
            },
            BlockItem {
                name: "cntr",
                description: Some("control register."),
                array: None,
                byte_offset: 0x40,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 16,
                    fieldset: Some("Cntr"),
                }),
            },
            BlockItem {
                name: "istr",
                description: Some("interrupt status register."),
                array: None,
                byte_offset: 0x44,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 16,
                    fieldset: Some("Istr"),
                }),
            },
            BlockItem {
                name: "fnr",
                description: Some("frame number register."),
                array: None,
                byte_offset: 0x48,
                inner: BlockItemInner::Register(Register {
                    access: Access::Read,
                    bit_size: 16,
                    fieldset: Some("Fnr"),
                }),
            },
            BlockItem {
                name: "daddr",
                description: Some("device address."),
                array: None,
                byte_offset: 0x4c,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 16,
                    fieldset: Some("Daddr"),
                }),
            },
            BlockItem {
                name: "btable",
                description: Some("Buffer table address."),
                array: None,
                byte_offset: 0x50,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Btable"),
                }),
            },
        ],
    }],
    fieldsets: &[
        FieldSet {
            name: "Btable",
            extends: None,
            description: Some("Buffer table address."),
            bit_size: 32,
            fields: &[Field {
                name: "btable",
                description: Some("Buffer table."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 3 }),
                bit_size: 13,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Cntr",
            extends: None,
            description: Some("control register."),
            bit_size: 16,
            fields: &[
                Field {
                    name: "fres",
                    description: Some("Force USB Reset."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "pdwn",
                    description: Some("Power down."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "lpmode",
                    description: Some("Low-power mode."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "fsusp",
                    description: Some("Force suspend."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 3 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "resume",
                    description: Some("Resume request."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "esofm",
                    description: Some("Expected start of frame interrupt mask."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "sofm",
                    description: Some("Start of frame interrupt mask."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 9 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "resetm",
                    description: Some("USB reset interrupt mask."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 10 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "suspm",
                    description: Some("Suspend mode interrupt mask."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 11 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "wkupm",
                    description: Some("Wakeup interrupt mask."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 12 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "errm",
                    description: Some("Error interrupt mask."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 13 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "pmaovrm",
                    description: Some("Packet memory area over / underrun interrupt mask."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 14 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "ctrm",
                    description: Some("Correct transfer interrupt mask."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 15 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Daddr",
            extends: None,
            description: Some("device address."),
            bit_size: 16,
            fields: &[
                Field {
                    name: "add",
                    description: Some("Device address."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 7,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "ef",
                    description: Some("Enable function."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 7 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Epr",
            extends: None,
            description: Some("endpoint register."),
            bit_size: 16,
            fields: &[
                Field {
                    name: "ea",
                    description: Some("Endpoint address."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 4,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "stat_tx",
                    description: Some("Status bits, for transmission transfers."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 2,
                    array: None,
                    enumm: Some("Stat"),
                },
                Field {
                    name: "dtog_tx",
                    description: Some("Data Toggle, for transmission transfers."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 6 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "ctr_tx",
                    description: Some("Correct Transfer for transmission."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 7 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "ep_kind",
                    description: Some("Endpoint kind."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "ep_type",
                    description: Some("Endpoint type."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 9 }),
                    bit_size: 2,
                    array: None,
                    enumm: Some("EpType"),
                },
                Field {
                    name: "setup",
                    description: Some("Setup transaction completed."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 11 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "stat_rx",
                    description: Some("Status bits, for reception transfers."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 12 }),
                    bit_size: 2,
                    array: None,
                    enumm: Some("Stat"),
                },
                Field {
                    name: "dtog_rx",
                    description: Some("Data Toggle, for reception transfers."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 14 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "ctr_rx",
                    description: Some("Correct transfer for reception."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 15 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Fnr",
            extends: None,
            description: Some("frame number register."),
            bit_size: 16,
            fields: &[
                Field {
                    name: "fn_",
                    description: Some("Frame number."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 11,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "lsof",
                    description: Some("Lost SOF."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 11 }),
                    bit_size: 2,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "lck",
                    description: Some("Locked."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 13 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rxdm",
                    description: Some("Receive data - line status."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 14 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rxdp",
                    description: Some("Receive data + line status."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 15 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Istr",
            extends: None,
            description: Some("interrupt status register."),
            bit_size: 16,
            fields: &[
                Field {
                    name: "ep_id",
                    description: Some("Endpoint Identifier."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 4,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "dir",
                    description: Some("Direction of transaction."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 1,
                    array: None,
                    enumm: Some("Dir"),
                },
                Field {
                    name: "esof",
                    description: Some("Expected start frame."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "sof",
                    description: Some("start of frame."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 9 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "reset",
                    description: Some("reset request."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 10 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "susp",
                    description: Some("Suspend mode request."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 11 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "wkup",
                    description: Some("Wakeup."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 12 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "err",
                    description: Some("Error."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 13 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "pmaovr",
                    description: Some("Packet memory area over / underrun."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 14 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "ctr",
                    description: Some("Correct transfer."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 15 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
    ],
    enums: &[
        Enum {
            name: "Dir",
            description: None,
            bit_size: 1,
            variants: &[
                EnumVariant {
                    name: "TO",
                    description: Some("data transmitted by the USB peripheral to the host PC"),
                    value: 0,
                },
                EnumVariant {
                    name: "FROM",
                    description: Some("data received by the USB peripheral from the host PC"),
                    value: 1,
                },
            ],
        },
        Enum {
            name: "EpType",
            description: None,
            bit_size: 2,
            variants: &[
                EnumVariant {
                    name: "BULK",
                    description: Some("Bulk endpoint"),
                    value: 0,
                },
                EnumVariant {
                    name: "CONTROL",
                    description: Some("Control endpoint"),
                    value: 1,
                },
                EnumVariant {
                    name: "ISO",
                    description: Some("Iso endpoint"),
                    value: 2,
                },
                EnumVariant {
                    name: "INTERRUPT",
                    description: Some("Interrupt endpoint"),
                    value: 3,
                },
            ],
        },
        Enum {
            name: "Stat",
            description: None,
            bit_size: 2,
            variants: &[
                EnumVariant {
                    name: "DISABLED",
                    description: Some("all requests addressed to this endpoint are ignored"),
                    value: 0,
                },
                EnumVariant {
                    name: "STALL",
                    description: Some(
                        "the endpoint is stalled and all requests result in a STALL handshake",
                    ),
                    value: 1,
                },
                EnumVariant {
                    name: "NAK",
                    description: Some(
                        "the endpoint is naked and all requests result in a NAK handshake",
                    ),
                    value: 2,
                },
                EnumVariant {
                    name: "VALID",
                    description: Some("this endpoint is enabled, requests are ACKed"),
                    value: 3,
                },
            ],
        },
    ],
};
