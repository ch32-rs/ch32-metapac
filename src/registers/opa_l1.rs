use crate::metadata::ir::*;
pub(crate) static REGISTERS: IR = IR {
    blocks: &[Block {
        name: "Opa",
        extends: None,
        description: Some("OPA configuration."),
        items: &[
            BlockItem {
                name: "cfgr1",
                description: Some("OPA configuration 1."),
                array: None,
                byte_offset: 0x0,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 16,
                    fieldset: Some("Cfgr1"),
                }),
            },
            BlockItem {
                name: "cfgr2",
                description: Some("OPA configuration 2."),
                array: None,
                byte_offset: 0x2,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 16,
                    fieldset: Some("Cfgr2"),
                }),
            },
            BlockItem {
                name: "ctlr1",
                description: Some("OPA control register 1."),
                array: None,
                byte_offset: 0x4,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Ctlr1"),
                }),
            },
            BlockItem {
                name: "ctlr2",
                description: Some("OPA control register 2."),
                array: None,
                byte_offset: 0x8,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Ctlr2"),
                }),
            },
            BlockItem {
                name: "opa_key",
                description: Some("OPA unlockkey."),
                array: None,
                byte_offset: 0xc,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("OpaKey"),
                }),
            },
            BlockItem {
                name: "cmp_key",
                description: Some("CMP unlockkey."),
                array: None,
                byte_offset: 0x10,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("CmpKey"),
                }),
            },
            BlockItem {
                name: "poll_key",
                description: Some("polling unlockkey."),
                array: None,
                byte_offset: 0x14,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("PollKey"),
                }),
            },
        ],
    }],
    fieldsets: &[
        FieldSet {
            name: "Cfgr1",
            extends: None,
            description: Some("OPA configuration 1."),
            bit_size: 16,
            fields: &[
                Field {
                    name: "poll_en",
                    description: Some("OPA1 enable positive polling."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "bkin_en",
                    description: Some("OPA1 break function enable."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rst_en",
                    description: Some("OPA1 reset enable."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "poll_lock",
                    description: Some("POLL LOCK."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 7 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "ie_out",
                    description: Some("OPA1 interrupt enable."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "ie_cnt",
                    description: Some("OPA interrupt enable at the end of polling interval."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 10 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "nmi_en",
                    description: Some("OPA connection NMI interrupt enable."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 11 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "if_out",
                    description: Some("OPA1 output interrupt."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 12 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "if_cnt",
                    description: Some("OPA interrupt flag at the end of polling interval."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 14 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Cfgr2",
            extends: None,
            description: Some("OPA configuration 2."),
            bit_size: 16,
            fields: &[
                Field {
                    name: "poll_vlu",
                    description: Some("OPA1 polling interval."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 9,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "poll1_num",
                    description: Some("OPA1 polling the number of positive ends."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 9 }),
                    bit_size: 3,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "CmpKey",
            extends: None,
            description: Some("CMP unlockkey."),
            bit_size: 32,
            fields: &[Field {
                name: "cmp_key",
                description: Some("CMP unlockkey."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Ctlr1",
            extends: None,
            description: Some("OPA control register 1."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "en1",
                    description: Some("OPA1 enable."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "mode1",
                    description: Some("OPA1 output channel selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 3,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "psel1",
                    description: Some("OPA1 forward input selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 3,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "fb_en1",
                    description: Some("OPA1 internal feedback resistance enable."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 7 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "nsel1",
                    description: Some(
                        "OPA1 negative end channel selection with PGA gain selection.",
                    ),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 4,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "lp1",
                    description: Some("OPA1 low-power mode selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 12 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "intrimp",
                    description: Some("OPA1 high-level offset voltage value polarity selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 16 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "itrimp",
                    description: Some("OPA1 high-level offset voltage value selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 17 }),
                    bit_size: 5,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "intrimn",
                    description: Some("OPA1 low-level offset voltage value polarity selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 24 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "itrimn",
                    description: Some("OPA1 low-level offset voltage value selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 25 }),
                    bit_size: 5,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "opa_lock",
                    description: Some("OPA lock."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 31 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Ctlr2",
            extends: None,
            description: Some("OPA control register 2."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "en1",
                    description: Some("CMP1 enable."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "mode1",
                    description: Some("CMP1 Output channel selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 2,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "nsel1",
                    description: Some("CMP1 negative input selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 3 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "psel1",
                    description: Some("CMP1 forward input selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "hyen1",
                    description: Some("CMP1 hysteresis function selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 5 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "lp1",
                    description: Some("CMP1 low-power switch."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 6 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "en2",
                    description: Some("CMP2 enable."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "mode2",
                    description: Some("CMP2 Output channel selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 9 }),
                    bit_size: 2,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "nse2l",
                    description: Some("CMP2 negative input selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 11 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "psel2",
                    description: Some("CMP2 forward input selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 12 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "hyen2",
                    description: Some("CMP2 hysteresis function selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 13 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "lp2",
                    description: Some("CMP2 low-power switch."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 14 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "en3",
                    description: Some("CMP3 enable."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 16 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "mode3",
                    description: Some("CMP3 Output channel selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 17 }),
                    bit_size: 2,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "nsel3",
                    description: Some("CMP3 negative input selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 19 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "psel3",
                    description: Some("CMP3 forward input selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 20 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "hyen3",
                    description: Some("CMP3 hysteresis function selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 21 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "lp3",
                    description: Some("CMP3 low-power switch."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 22 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "wkup_md",
                    description: Some("CMP wake-up signal mode selection."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 24 }),
                    bit_size: 2,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "cmp_lock",
                    description: Some("CMP lock."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 31 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "OpaKey",
            extends: None,
            description: Some("OPA unlockkey."),
            bit_size: 32,
            fields: &[Field {
                name: "opa_key",
                description: Some("OPA unlockkey."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "PollKey",
            extends: None,
            description: Some("polling unlockkey."),
            bit_size: 32,
            fields: &[Field {
                name: "poll_key",
                description: Some("polling unlockkey."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
    ],
    enums: &[],
};
